# Gerador de relatorios de valida√ß√£o ;)

## üìí Descri√ß√£o
  Gerar relat√≥rios a fim de minimizar tempo para confec√ß√£o de documentos t√©cnicos para atividade em ind√∫stria farmac√™utica.
  "Para criar um modelo inicial py  de um programa de desenvolvimento de relat√≥rios para a ind√∫stria farmac√™utica, considerando as trilhas de auditoria e a prote√ß√£o de dados conforme a CFR 21 Parte 11, vou desenvolver um diagrama de classes. Este diagrama incluir√° as principais entidades e suas rela√ß√µes, focando nos aspectos de auditoria, seguran√ßa e conformidade regulat√≥ria."

## ü§ñ Tecnologias Utilizadas
  Foi utilizado Chat GPT para iniciar o esbo√ßo do projeto

## üßê Processo de Cria√ß√£o
  Descreva como voc√™ criou o conte√∫do
  Dentro do chaGPT eu pedi para ele no seguinte prompit: "Para criar um modelo inicial py  de um programa de desenvolvimento de relat√≥rios para a ind√∫stria farmac√™utica, considerando as trilhas de auditoria e a prote√ß√£o de dados conforme a CFR 21 Parte 11, vou desenvolver um diagrama de classes. Este diagrama incluir√° as principais entidades e suas rela√ß√µes, focando nos aspectos de auditoria, seguran√ßa e conformidade regulat√≥ria."

## üöÄ Resultados

  Diagrama de Classes - Descri√ß√£o
  Classe Relat√≥rio
  
  Atributos:
  id: Identificador √∫nico do relat√≥rio.
  t√≠tulo: T√≠tulo do relat√≥rio.
  data_cria√ß√£o: Data em que o relat√≥rio foi criado.
  autor: Autor do relat√≥rio.
  status: Status atual do relat√≥rio (ex: rascunho, revisado, aprovado).
  M√©todos:
  gerar_relatorio(): M√©todo para gerar o conte√∫do do relat√≥rio.
  revisar_relatorio(): M√©todo para revisar o relat√≥rio.
  aprovar_relatorio(): M√©todo para aprovar o relat√≥rio.
  Classe Auditoria
  
  Atributos:
  id: Identificador √∫nico do registro de auditoria.
  a√ß√£o: Descri√ß√£o da a√ß√£o realizada (ex: cria√ß√£o, modifica√ß√£o, exclus√£o).
  data_hora: Data e hora da a√ß√£o.
  usu√°rio: Usu√°rio que realizou a a√ß√£o.
  detalhes: Detalhes adicionais sobre a a√ß√£o.
  M√©todos:
  registrar_a√ß√£o(): M√©todo para registrar uma nova a√ß√£o de auditoria.
  Classe Usu√°rio
  
  Atributos:
  id: Identificador √∫nico do usu√°rio.
  nome: Nome do usu√°rio.
  papel: Papel do usu√°rio (ex: autor, revisor, administrador).
  credenciais: Informa√ß√µes de autentica√ß√£o do usu√°rio.
  M√©todos:
  autenticar(): M√©todo para autenticar o usu√°rio.
  autorizar(): M√©todo para verificar permiss√µes do usu√°rio.
  Classe Seguran√ßa
  
  Atributos:
  n√≠vel_acesso: N√≠vel de acesso necess√°rio para visualizar ou editar o relat√≥rio.
  m√©todos_encripta√ß√£o: M√©todos utilizados para proteger os dados.
  M√©todos:
  encriptar_dados(): M√©todo para encriptar dados sens√≠veis.
  desencriptar_dados(): M√©todo para desencriptar dados sens√≠veis.
  
  Apresente os resultados do seu projeto

class Relatorio:
    def __init__(self, id, titulo, data_criacao, autor, status):
        self.id = id
        self.titulo = titulo
        self.data_criacao = data_criacao
        self.autor = autor
        self.status = status

    def gerar_relatorio(self):
        # L√≥gica para gerar o relat√≥rio
        pass

    def revisar_relatorio(self):
        # L√≥gica para revisar o relat√≥rio
        pass

    def aprovar_relatorio(self):
        # L√≥gica para aprovar o relat√≥rio
        pass

class Auditoria:
    def __init__(self, id, acao, data_hora, usuario, detalhes):
        self.id = id
        self.acao = acao
        self.data_hora = data_hora
        self.usuario = usuario
        self.detalhes = detalhes

    def registrar_acao(self):
        # L√≥gica para registrar uma a√ß√£o de auditoria
        pass

class Usuario:
    def __init__(self, id, nome, papel, credenciais):
        self.id = id
        self.nome = nome
        self.papel = papel
        self.credenciais = credenciais

    def autenticar(self):
        # L√≥gica para autenticar o usu√°rio
        pass

    def autorizar(self):
        # L√≥gica para verificar permiss√µes do usu√°rio
        pass

class Seguranca:
    def __init__(self, nivel_acesso, metodos_encriptacao):
        self.nivel_acesso = nivel_acesso
        self.metodos_encriptacao = metodos_encriptacao

    def encriptar_dados(self):
        # L√≥gica para encriptar dados
        pass

    def desencriptar_dados(self):
        # L√≥gica para desencriptar dados
        pass

## üí≠ Reflex√£o (Opcional)
Comente sobre o desafio de criar algo 'natty' com IA.

  muito legal ver como a facilidade de atividades complexas com AI para atividade 
